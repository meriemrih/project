volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  filebeatdata01:
    driver: local

networks:
  elastic:
    driver: bridge  # Utilisation du mode bridge pour connecter les conteneurs entre eux
    ipam:
      config:
        - subnet: 172.21.0.0/16 # Attribution d'un sous-réseau spécifique aux conteneurs

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    networks:
      elastic:
        ipv4_address: 172.21.1.1
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    environment:
      - TZ=Africa/Algiers
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro  # (optionnel mais recommandé)
    ports:
      - ${ES_PORT}:9200
    networks:
      elastic:
        ipv4_address: 172.21.0.2
    restart: unless-stopped
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - TZ=Africa/Algiers
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro  # (optionnel mais recommandé)
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      elastic:
        ipv4_address: 172.21.0.3
    restart: unless-stopped
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - TZ=Africa/Algiers
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  filebeat01:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata01:/usr/share/filebeat/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro  # (optionnel mais recommandé)
      
      - "./services/syslog/logs/dns_server:/usr/share/filebeat/ingest_data/dns/"
      - "./services/syslog/logs/web_server:/usr/share/filebeat/ingest_data/web/"
      - "./services/syslog/logs/ips_server:/usr/share/filebeat/ingest_data/ips/"
      - "./services/syslog/logs/ftp_server:/usr/share/filebeat/ingest_data/ftp/"
      - "./services/syslog/logs/user_data:/usr/share/filebeat/ingest_data/user_data/"
      - "./services/syslog/logs/mysql_server:/usr/share/filebeat/ingest_data/mysql/"
      
      - "./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      elastic:
        ipv4_address: 172.21.0.4
    restart: unless-stopped
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - TZ=Africa/Algiers
    
  thehive:
    image: strangebee/thehive:5.1.12
    container_name: thehive
    restart: unless-stopped
    ports:
      - "9000:9000"
    networks:
      elastic:
        ipv4_address: 172.21.0.5
    environment:
      - STORAGE_INDEX_TYPE=elasticsearch
      - STORAGE_ES_HOSTS=http://es01:9200
      - STORAGE_ES_SSL=false
      - STORAGE_ES_INDEX_PREFIX=thehive
      - CORTEX_REPORT_TLP=true
      - TZ=Africa/Algiers
    depends_on:
      - es01
      
  cortex:
    image: 'thehiveproject/cortex:3.1.1-1'
    environment:
      - JOB_DIRECTORY=${JOB_DIRECTORY}
      - TZ=Africa/Algiers
      - STORAGE_ES_HOSTS=https://es01:9200
      - STORAGE_ES_SSL=true
    networks:
      elastic:
        ipv4_address: 172.21.0.21
    volumes:
      - ./cortex/application.conf:/etc/cortex/application.conf
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '${JOB_DIRECTORY}:/tmp/cortex-jobs'
      - certs:/usr/share/elasticsearch/config/certs

    depends_on:
      - es01
    ports:
      - '0.0.0.0:9001:9001'
